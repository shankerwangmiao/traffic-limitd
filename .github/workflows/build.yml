name: build-binary

on:
  push:
    branches:
      - k8s-go
    tags: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Pull Docker image
        run: |
          docker pull debian:bullseye
      - name: Cache Go builds
        uses: actions/cache@v3
        if: github.event_name == 'push'
        with:
          path: /tmp/gobuildcache
          key: go-build-${{ github.sha }}
          restore-keys: |
            go-build-
      - name: Start Docker container
        run: |
          mkdir -p /tmp/gobuildcache
          chown -R "$(id --user):$(id --group)" /tmp/gobuildcache
          wget -O /tmp/gobuildcache/go.tar.gz https://go.dev/dl/go1.20.5.linux-amd64.tar.gz
          docker run -d --name build \
            --user "$(id --user):$(id --group)" \
            -v "$PWD":"$PWD" \
            -v "/tmp/gobuildcache":"/tmp/gobuildcache" \
            -w "$PWD" \
            debian:bullseye tail -f /dev/null
      - name: Install build dependencies
        run: |
          docker exec -i --user 0:0 build bash -e -o pipefail << 'EOF'
          apt-get update
          apt-get -y install --no-install-recommends libbpf-dev bpftool pkg-config clang build-essential ca-certificates
          rm -rf /usr/local/go && tar -C /usr/local -xzf /tmp/gobuildcache/go.tar.gz
          EOF
      - name: Build
        run: |
          docker exec -i build bash -e -o pipefail << 'EOF'
          mkdir -p /tmp/home
          export HOME=/tmp/home
          export GOCACHE=/tmp/gobuildcache
          export GOMODCACHE=$GOCACHE
          export CFLAGS="$CFLAGS -fPIC"
          export PATH=$PATH:/usr/local/go/bin
          make
          cd client/
          make
          EOF
      - name: Copy binary
        run: |
          mkdir -p k8s-traffic-limitd
          cp traffic-limitd k8s-traffic-limitd/
          cp client/objs/traffic-limit-hook k8s-traffic-limitd/
          tar -cvzf k8s-traffic-limitd.tar.gz k8s-traffic-limitd/
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          path: k8s-traffic-limitd.tar.gz
          name: k8s-traffic-limitd.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: k8s-traffic-limitd.tar.gz
      - run:
          ls -la
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: k8s-traffic-limitd.tar.gz
